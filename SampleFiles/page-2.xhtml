<?xml version="1.0" encoding="UTF-8"?>
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><head><title>2 Page 2 | Develop in Swift Fundamentals Teacher Guide</title><link rel="stylesheet" href="css/book.css" type="text/css"/><script src="js/book.js"/><meta charset="UTF-8"/><meta name="EPB-UUID" content="EE21E524-9399-4D95-9F72-80F5EA813ABF"/><meta name="viewport" content="width=768px,height=1003.68px"/></head><body dir="ltr" onload="Body_onLoad()"><div class="body" style="white-space:pre; line-break:strict;"><p style="font-size:1px;"><span style="display:inline-block;position:absolute;left:60.000px;top:187.000px;width:648.000px;height:342.000px;"><img src="images/image-6.png" alt="Develop in Swift Fundamentals is designed to teach high school and higher education students how to be an app developer, capable of turning their own ideas into useful and exciting apps. The course starts by introducing students to iOS development tools, basic programming concepts, and industry best practices. Building on this foundation, students will follow a step-by-step curriculum, working through practical exercises, creating apps from scratch, and building the mindset of an app developer. Throughout the course students will have the chance to design, prototype, and test an app all of their own. They’ll connect and apply the coding skills they’re learning to bring their app idea to life.… Develop in Swift Fundamentals is designed to teach high school and higher education students how to be an app developer, capable of turning their own ideas into useful and exciting apps. The course starts by introducing students to iOS development tools, basic programming concepts, and industry best practices. Building on this foundation, students will follow a step-by-step curriculum, working through practical exercises, creating apps from scratch, and building the mindset of an app developer. Throughout the course students will have the chance to design, prototype, and test an app all of their own. They’ll connect and apply the coding skills they’re learning to bring their app idea to life.&#10;Develop in Swift Fundamentals works as a full-year course in a high school setting or as a one-semester course in a higher education setting. The content is flexible, giving you the freedom to adapt it to fit your specific situation. For example, you may want to run the course as an after-school program for a computer club or as an immersive app development bootcamp.&#10;To work through the entire course, you’ll need to plan between 150 and 200 hours. The actual time will depend on many factors: your students’ previous experience (if any), the pacing of your teaching, the desired outcomes for your class, and your students’ access to Xcode-capable computers at home. If you plan to have students build their own apps during classroom time, plan on the high end of that estimate.&#10;However you choose to teach Develop in Swift Fundamentals, you’ll want to adjust your pacing to cover as much content as possible in the time available. If you can’t cover the entire course, start at the beginning and offer the first few units. You can then invite students to take the later units as an advanced section of your class or to finish the curriculum independently.&#10;If you have students who already have some programming experience, you can expect them to move through the early lessons more quickly. This guide includes extension activities for each lesson that will help you push your more advanced students beyond the labs and projects in the core content.&#10;Course Structure and Content&#10;At the core of Develop in Swift Fundamentals are three progressively challenging guided projects, each preceded by multiple lessons that cover the concepts and skills required to build the app. At the beginning and end of each unit, students return to a personal project and progress through the app design cycle to prototype an app of their own.&#10;About the Lessons&#10;The course features 33 lessons that help students learn a specific skill related to Swift, app development, or app design. Each lesson starts with a brief introduction to the concept, a set of learning objectives, new vocabulary terms, and references to documentation used to build the lesson. The body of the lesson includes concept explanations, sample code, and screencasts. At the end of each lesson, a lab and review questions allow students to apply the concepts they’ve just learned and check their understanding.Since Develop in Swift Fundamentals covers three very different types of content—Swift, app development, and app design—you’ll see three different approaches to the lessons. Swift lessons focus on specific concepts, and the labs for these are presented in playgrounds—an interactive coding environment that lets you experiment with code and see the results immediately. App development lessons cover the Software Development Kit, or SDK. These lessons focus on building specific features for iOS apps, usually guiding you through a mini-project. The labs for these guide you to apply what you learned in a new scenario. App design lessons use the app design cycle to build the design skills that turn an idea into a concrete app. Design lessons use the App Design Workbook to develop and refine students’ app ideas over time, connecting to what they’re learning about code.&#10;In most cases, a lesson should last between 45 and 60 minutes, plus 30 to 45 minutes for each lab. Lessons on the more advanced topics will take longer. Depending on the needs of your students, you may choose to spread each lesson across more than one day of class.&#10;About the Projects&#10;Each guided project includes a description of user-centered features, a project plan, and step-by-step instructions that lead to a fully functioning app (provided the student follows all the steps correctly). Through these guided projects—as well as through labs sprinkled throughout the course—students will be able to customize features according to their interests. At the same time, they’ll be performing the kind of work they can expect to do in an app development workplace.&#10;The first project is Light, a simple flashlight app. Students will learn the basics of data, operators, and control flow in the Swift programming language. They’ll also learn about Xcode, Interface Builder, building and running an app, debugging, and documentation.&#10;The second project is Apple Pie, a word-guessing game. Students will learn about Swift strings, functions, structures, collections, and loops. They’ll also learn about UIKit, the system views and controls that make up a user interface, and how to display data using Auto Layout and stack views.The third project is Personality Quiz, a personalized survey that reveals a fun response to the user. Students will learn how to build simple workflows and navigation hierarchies using navigation controllers, tab bar controllers, and segues. They’ll also learn about optionals and enumerations, two powerful tools in Swift.&#10;If you’re teaching Develop in Swift Fundamentals in a classroom setting, you’ll want to plan between two and four hours for each guided project—with the exception of Light, which should take no more than an hour. If you have students who finish a project early, you can suggest they complete the stretch goals. Or you might suggest that your fast learners pair up with students who are struggling.&#10;About the Personal Project&#10;The App Design Workbook uses a design thinking framework to teach students app design—a fundamental skill of iOS app development. They’ll explore the relationships between app design and coding in Swift through each stage of the app design cycle to bring their app idea to life.&#10;While this course focuses on the UIKit framework, the App Design Workbook has embedded coding activities that use the SwiftUI framework. App developers these days sometimes combine the two frameworks, since they have different strengths and weaknesses. While the App Design Workbook SwiftUI coding exercises are optional, students can complete the activities to expand their coding knowledge and skills. &#10;Code Review&#10;Code review is a crucial part of any computer science or app development course. Of course, as a teacher, you’ll want to review your students’ code to evaluate what they’ve learned. But it’s even more important to have your students review each other’s code. Make code review a regular part of class so it’s accessible to all your students.&#10;This practice—reading someone else’s code and having one’s own code read by others—has many benefits. It serves to develop critical thinking, build good habits, engender pride of ownership, and highlight ways to improve. Try to plan short daily code reviews and longer peer reviews at the end of each project.&#10;During peer code review, encourage students to discuss their answers to the following questions:&#10;Does the code compile with no errors?&#10;Does the code meet all the specifications outlined in the lab or project?&#10;Does the code follow consistent naming conventions and recommended styles?&#10;In a teacher-led code review, you’ll spend 20 to 30 minutes with each student, providing specific feedback based on the desired traits for the lesson. You may want to find mentors, teacher assistants, or advanced students to help you conduct regular code reviews with all the students in the class.In addition to the questions for peer review, consider the following questions in your one-on-one code reviews:&#10;Does the code demonstrate the desired traits listed in the teacher guide?&#10;Does the code demonstrate student understanding of the lesson or project objectives?&#10;Did the student write the code, or was it copied and pasted from the course content?&#10;How to Use This Guide&#10;The teacher guide for Develop in Swift Fundamentals gives you everything you need to support your students as they work through the course. For each lesson, you’ll find the following:&#10;Learning objectives. If the student should understand a concept, the objective will say “describe.” If the student should be able to implement the concept in code, it will say “demonstrate.”&#10;Vocabulary. Key vocabulary for each lesson is included.&#10;Keynote deck for group discussions. Download the decks from the link provided at the end of this chapter.&#10;Rubric for evaluating student work. How well did your students learn the lesson? We recommend using a four-point rubric, which you can view alongside the desired traits for labs and projects throughout the course.&#10;Additional teaching ideas. Want to extend or adapt the lesson? These tips suggest ways to increase collaboration, assist students who need extra attention, and challenge students who crave more complex instruction.&#10;Code review. Criteria you can use to evaluate students’ understanding of the concepts covered in the lab.&#10;In addition to the extra resources in this guide, you have access to solution code for the labs. You can download the solutions from the link at the end of this section.&#10;Develop in Swift Course Offering&#10;Develop in Swift is a comprehensive coding offering intended for students in grades 9 and above. The curriculum prepares students for college or a career in app development using the Swift programming language, and is complemented with free online professional learning for educators. Swift is designed for Mac—which supports all major programming languages—making it the ideal device for teaching and learning code.&#10;About Swift&#10;Swift is a powerful and intuitive open source programming language designed by Apple. It’s the same language professional developers are using in the fast-growing app economy to make apps for iOS, macOS, tvOS, iPadOS, watchOS and beyond.&#10;&#10;&#10;&#10;Additional Resources&#10;&#10;&#10;&#10;&#10;&#10;&#10;Wrap-Up&#10;By the end of Develop in Swift Fundamentals, students should have the skills and knowledge required to create real-world apps that adhere to many industry best practices. Equally important, they’ll have a solid foundation to support their continued learning as they create more complex apps on their own.&#10;You’re ready to get started. We’re excited see what you and your students create.&#10;Gather Your Materials&#10;You can download all of the student resources as well as solution code and the Keynote decks using the links below." style="width:648.000px;height:342.000px;"/></span></p><div style="position:absolute;left:60.000px;top:187.000px;width:648.000px;height:342.000px;"><p class="p7 c1" style="position:absolute;left:0;top:0;"><span class="c3">Develop in Swift Fundamentals</span><span class="c4"> is designed to teach high school and higher education </span></p><p class="p7" style="position:absolute;left:0;top:23.000px;">students how to be an app developer, capable of turning their own ideas into useful and </p><p class="p7" style="position:absolute;left:0;top:46.000px;">exciting apps. The course starts by introducing students to iOS development tools, </p><p class="p7" style="position:absolute;left:0;top:69.000px;">basic programming concepts, and industry best practices. Building on this foundation, </p><p class="p7" style="position:absolute;left:0;top:92.000px;">students will follow a step-by-step curriculum, working through practical exercises, </p><p class="p7" style="position:absolute;left:0;top:115.000px;">creating apps from scratch, and building the mindset of an app developer. Throughout </p><p class="p7" style="position:absolute;left:0;top:138.000px;">the course students will have the chance to design, prototype, and test an app all of </p><p class="p7" style="position:absolute;left:0;top:161.000px;">their own. They’ll connect and apply the coding skills they’re learning to bring their app </p><p class="p7" style="position:absolute;left:0;top:184.000px;">idea to life.</p><p class="p7 c1" style="position:absolute;left:0;top:219.000px;"><span class="c3">Develop in Swift Fundamentals</span><span class="c4"> works as a full-year course in a high school setting or as </span></p><p class="p7" style="position:absolute;left:0;top:242.000px;">a one-semester course in a higher education setting. The content is flexible, giving you </p><p class="p7" style="position:absolute;left:0;top:265.000px;">the freedom to adapt it to fit your specific situation. For example, you may want to run </p><p class="p7" style="position:absolute;left:0;top:288.000px;">the course as an after-school program for a computer club or as an immersive app </p><p class="p7" style="position:absolute;left:0;top:311.000px;">development bootcamp.</p></div><p style="font-size:1px;"><span style="display:inline-block;position:absolute;left:50.000px;top:969.000px;width:661.000px;height:20.000px;"><img src="images/image-1.png" alt="Introduction    Introduction   ￼" style="width:661.000px;height:20.000px;"/></span></p><div style="position:absolute;left:50.000px;top:969.000px;width:661.000px;height:20.000px;"><p class="p2" style="position:absolute;right:0;top:0;">   Introduction   3</p></div><p style="font-size:1px;"><span style="display:inline-block;position:absolute;left:50.000px;top:960.000px;width:441.000px;height:36.000px;"><img src="images/image-7.png" alt="Teacher Guide Teacher Guide" style="width:441.000px;height:36.000px;"/></span></p><div style="position:absolute;left:50.000px;top:960.000px;width:441.000px;height:36.000px;"><p class="p8 c1" style="position:absolute;left:0;top:0;"><span class="c5">Teacher </span><span class="c5">Guide</span></p></div><p style="font-size:1px;"><span style="display:inline-block;position:absolute;left:60.000px;top:91.400px;width:695.000px;height:87.000px;"><img src="images/image-8.png" alt="Introduction Introduction" style="width:695.000px;height:87.000px;"/></span></p><div style="position:absolute;left:60.000px;top:91.400px;width:695.000px;height:87.000px;"><p class="p9 p10" style="position:absolute;left:0;top:0;">Introduction</p></div><p style="font-size:1px;"><span style="display:inline-block;position:absolute;left:0;top:557.000px;width:768.000px;height:447.000px;"><img src="images/lifestyle1.jpg" alt="lifestyle1.jpg" style="width:768.000px;height:447.000px;"/></span></p></div></body></html>
